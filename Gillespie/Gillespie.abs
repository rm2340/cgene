module Gillespie;
export *;
import * from ABS.StdLib;
import * from Reaction;
import * from Math;

// A Substance
data Substance = Substance(String name);

/* This is the environment 
 * - it contains substances
 * - that react with each other according to the given reactions
 *
 */
interface Substrate {
    Bool consumeSubstances(Map<Substance, Int> consumption);
    Unit produceSubstances(Map<Substance, Int> production);
    Unit run();
}

class Substrate(Map<Substance, Int> substances, Set<Reaction> reactions) implements Substrate {
    
    Unit run() {
        // start all reactions
        while (hasNext(reactions)) {
            Reaction r = take(reactions);
            reactions = remove(reactions, r);
            r!start(this);
        }
    }
    
    Bool consumeSubstances(Map<Substance, Int> consumption) {
        Bool success = False;
        Set<Substance> availableSubstances = keys(substances);
	    Set<Substance> requiredSubstances = keys(consumption);

        // Test if every required substance exists in the required quantity
	    Bool continue = True;
	    while (hasNext(requiredSubstances) && continue) {
	        Substance s = take(requiredSubstances);
	        requiredSubstances = remove(requiredSubstances, s);
	        Int q = lookupUnsafe(consumption, s);
	        
	        if (contains(availableSubstances, s)) {
	            Int availableQuantity = lookupUnsafe(substances, s);
	            if (q > availableQuantity) {
	                continue = False;
	            }
	        } else {
                continue = False;
	        }
	    }
	    
	    if (continue) {
		    // Consume the substances
		    Set<Substance> consumedSubstances = keys(consumption);
		    while (hasNext(consumedSubstances)) {
		        Substance s = take(consumedSubstances);
		        consumedSubstances = remove(consumedSubstances, s);
		        Int q = lookupUnsafe(consumption, s);
		        Int availableQuantity = lookupUnsafe(substances, s);
		        substances = put(substances, s, availableQuantity - q);
		        
                availableQuantity = lookupUnsafe(substances, s);
		        println(toString(s) + " " + toString(availableQuantity));
		    }
		    success = True;
		} else {
		    success = False;
		}
		return success;
    }

    Unit produceSubstances(Map<Substance, Int> production) {
        Set<Substance> producedSubstances = keys(production);
        while (hasNext(producedSubstances)) {
            Substance s = take(producedSubstances);
            producedSubstances = remove(producedSubstances, s);
            Int q = lookupUnsafe(production, s);
            Int availableQuantity = lookupUnsafe(substances, s);
            substances = put(substances, s, availableQuantity + q);
	        
            availableQuantity = lookupUnsafe(substances, s);
	        println(toString(s) + " " + toString(availableQuantity));
        }
    }
}


