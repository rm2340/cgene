module Gillespie;
export *;
import * from ABS.StdLib;
import * from Reaction;
import * from Math;

// A Substance
data Substance = Substance(String name);

/* This is the environment 
 * - it contains substances
 * - that react with each other according to the given reactions
 *
 */
interface Substrate {
    Bool testSubstances(Set<Substance> reactants);
    Bool consumeSubstances(Map<Substance, Int> consumption);
    Unit produceSubstances(Map<Substance, Int> production);
    Int reactionRate(Map<Substance, Int> consumption);
    Unit run();
    Unit logRate(String desc, Int rate);
}

class Substrate(Map<Substance, Int> substances, Set<Reaction> reactions) implements Substrate {
    
    Unit run() {
        this.logInit();
        // start all reactions
        while (hasNext(reactions)) {
            Reaction r = take(reactions);
            reactions = remove(reactions, r);
            r!start(this);
        }
    }
    
    /*
     * Sanity check: do all reactants exist in the substrate? (they should)
     * TODO: raise exception if not
     */
    Bool testSubstances(Set<Substance> reactants) {
        Bool success = True;
        Set<Substance> availableSubstances = keys(substances);

        // Test if every reactant exists
        Bool continue = True;
        while (hasNext(reactants) && continue) {
            Substance s = take(reactants);
            reactants = remove(reactants, s);
            if (! contains(availableSubstances, s)) {
                continue = False;
                success = False;
            }
        }
        return success;
    }
    
    /* Returns True if reactants exist in sufficient qunatity for the reaction to occur
     */
    Bool consumeSubstances(Map<Substance, Int> consumption) {
        Bool success = False;
        Set<Substance> availableSubstances = keys(substances);
	    Set<Substance> requiredSubstances = keys(consumption);

        // Test if every required substance exists in the required quantity
	    Bool continue = True;
	    while (hasNext(requiredSubstances) && continue) {
	        Substance s = take(requiredSubstances);
	        requiredSubstances = remove(requiredSubstances, s);
	        Int q = lookupUnsafe(consumption, s);
            Int availableQuantity = lookupUnsafe(substances, s);
            Rat ratio = q / availableQuantity;
            if (q > availableQuantity) {
                continue = False;
            }
	    }
	    
	    if (continue) {
		    // Consume the substances
		    Set<Substance> consumedSubstances = keys(consumption);
		    while (hasNext(consumedSubstances)) {
		        Substance s = take(consumedSubstances);
		        consumedSubstances = remove(consumedSubstances, s);
		        Int q = lookupUnsafe(consumption, s);
		        Int availableQuantity = lookupUnsafe(substances, s);
		        substances = put(substances, s, availableQuantity - q);
		    }
		    success = True;
		} else {
		    success = False;
		}
		return success;
    }

    Unit produceSubstances(Map<Substance, Int> production) {
        Set<Substance> producedSubstances = keys(production);
        while (hasNext(producedSubstances)) {
            Substance s = take(producedSubstances);
            producedSubstances = remove(producedSubstances, s);
            Int q = lookupUnsafe(production, s);
            Int availableQuantity = lookupUnsafe(substances, s);
            substances = put(substances, s, availableQuantity + q);
        }
        this.logg();
    }
    
    /* Return the reaction rate as a function of the quantity of currently 
     * available molecules of all reactants.
     * Zero if at least one reactant has zero molecules.
     *
     * TODO: Consider the quantity of required molecules (consumption)?
     */
    Int reactionRate(Map<Substance, Int> consumption) {
        Set<Substance> availableSubstances = keys(substances);
        Set<Substance> requiredSubstances = keys(consumption);
        
        Int reactionRate = 1;   
        while (hasNext(requiredSubstances)) {
            Substance s = take(requiredSubstances);
            requiredSubstances = remove(requiredSubstances, s);
            Int availableQuantity = lookupUnsafe(substances, s);
            reactionRate = reactionRate * availableQuantity;
        }
        return reactionRate;
    }
    
    
    
    
    
    
    
    // logging/plotting output
    Unit logInit() {
        Set<Substance> availableSubstances = keys(substances);
        print("num den");
        while (hasNext(availableSubstances)) {
            Substance s = take(availableSubstances);
            availableSubstances = remove(availableSubstances, s);
            print("    " + name(s));
        }
        println("");
    }
    
    Unit logg() {
        Set<Substance> availableSubstances = keys(substances);
        print(toString(numerator(timeValue(now()))) + " " + toString(denominator(timeValue(now()))));
        while (hasNext(availableSubstances)) {
            Substance s = take(availableSubstances);
            availableSubstances = remove(availableSubstances, s);
            print("    " + toString(lookupUnsafe(substances, s)));
        }
        println("");
    }
    
    Unit logRate(String desc, Int rate) {
        print(toString(numerator(timeValue(now()))) + " " + toString(denominator(timeValue(now()))));
        print("   " + desc);    
        println("   " + toString(rate));    
    }
}


