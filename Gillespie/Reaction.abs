module Reaction;
export *;
import * from Gillespie;


interface Reaction {
    Unit addReactant(Substance r, Int n);
    Unit addProduct(Substance p, Int n);
    Unit start(Substrate env);
    Unit setRateFactor(Rat f);
    Unit setID(String s);
    String toString();
}

/* 
 * Reaction: 
 *      multiset of reactants -> multiset of products
 *      A reaction gets its reactants from and releases its products into the environment (Substrate)
 *      The rateFactor (default: 1) can be used to adjust the reaction speed
 */
class Reaction() implements Reaction {
    String id = "SetMe";
    Rat rateFactor = 1;
    Map<Substance, Int> reactants = EmptyMap;
    Map<Substance, Int> products = EmptyMap;
     
    Unit addReactant(Substance r, Int n) {
        reactants = insert(reactants, Pair(r, n));
    }
    Unit addProduct(Substance p, Int n) {
        products = insert(products, Pair(p, n));
    }
    Unit setRateFactor(Rat f) {
        rateFactor = f;
    }
    
    Unit start(Substrate env) {
        Bool ok = await env!testSubstances(keys(reactants));
        assert ok;
        
        while(True) {
            Int envRate = await env!reactionRate(reactants);
            if (envRate != 0) {
	            Bool can = await env!consumeSubstances(reactants);
	            if (can) {
	                //produce
	                await env!produceSubstances(products);
                    
	                // Wait for a duration inverse to the reaction rate
	                Rat rate = envRate * rateFactor;
	                duration(1/rate, 1/rate);

                    // log
                    String name = this.toString();
                    await env!logRate(id, rate);
                }
            }
        }
    }
    
    
    Unit setID(String s) {
        this.id = s;
    }
    
    String toString() {
        String res = "";
        Set<Substance> subst = keys(reactants);
        
        String plus = "";
        while (hasNext(subst)) {
            Substance s = take(subst);
            subst = remove(subst, s);
            Int q = lookupUnsafe(reactants, s);
            if (q > 1) {
                res = res + toString(q);
            }
            res = res + plus;
            res = res + name(s);
            plus = "+";
        }
        res = res + "->";
        subst = keys(products);
        plus = "";
        while (hasNext(subst)) {
            Substance s = take(subst);
            subst = remove(subst, s);
            Int q = lookupUnsafe(products, s);
            if (q > 1) {
                res = res + toString(q);
            }
            res = res + plus;
            res = res + name(s);
            plus = "+";
        }
        return res;
    }
}

