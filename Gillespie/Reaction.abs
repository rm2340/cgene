module Reaction;
export Reaction;
import * from Gillespie;

interface Reaction {
    Unit addReactant(Substance r, Int n);
    Unit addProduct(Substance p, Int n);
    Unit start(Substrate env);
    Unit setRate(Rat f);
    Rat getRate();
    Unit setEnergyConsumption(Int i);
    Unit setID(String s);
    String toString();
}

/* 
 * Reaction Channel: 
 *      multiset of reactants -> multiset of products
 *      A reaction gets its reactants from and releases its products into the environment (Substrate)
 *      The rateFactor (default: 1) is intrinsic to a particular reaction and determines the reaction speed
 */
class Reaction() implements Reaction {
    String id = "SetMe";
    Rat rate = 1;
    Int energyConsumption = 0;
    
    /* These maps determine the substances and quantities that are consumed/produced  
     * when the reaction occurs.
     */
    Map<Substance, Int> reactants = map[];
    Map<Substance, Int> products = map[];
     
    Unit addReactant(Substance r, Int n) {
        reactants = insert(reactants, Pair(r, n));
    }
    Unit addProduct(Substance p, Int n) {
        products = insert(products, Pair(p, n));
    }
    Unit setRate(Rat f) {
        rate = f;
    }
    Rat getRate() {
        return rate;
    }
    Unit setEnergyConsumption(Int i) {
        energyConsumption = i;
    }
    
    
    /* A reaction occurs if the necessary reactants exist
     * After that, the channel waits for a certain duration (which depends on the reaction rate)
     */
    Unit start(Substrate env) {
        Bool ok = await env!testSubstances(keys(reactants));
        assert ok;
        this.loop(env);
    }
    
    Unit loop(Substrate env) {
        while(True) {
            Int factor = await env!reactionFactor(reactants);
            Bool can = await env!consumeSubstances(reactants);
            if (can) {
                //produce
                await env!produceSubstances(products);
                
                // Wait for a duration inverse to the reaction rate
                // TODO Mass action formula
                Rat currentRate = rate * factor;
                assert currentRate > 0;
                duration(1/currentRate, 1/currentRate);

                // log
                await env!logRate(id, currentRate);
            }
        }
    }
    
    
    Unit setID(String s) {
        this.id = s;
    }
    
    String toString() {
        String res = "";
        Set<Substance> subst = keys(reactants);
        
        String plus = "";
        while (hasNext(subst)) {
            Substance s = take(subst);
            subst = remove(subst, s);
            Int q = lookupUnsafe(reactants, s);
            if (q > 1) {
                res = res + toString(q);
            }
            res = res + plus;
            res = res + name(s);
            plus = "+";
        }
        res = res + "--" + toString(rate) + "->";
        subst = keys(products);
        plus = "";
        while (hasNext(subst)) {
            Substance s = take(subst);
            subst = remove(subst, s);
            Int q = lookupUnsafe(products, s);
            if (q > 1) {
                res = res + toString(q);
            }
            res = res + plus;
            res = res + name(s);
            plus = "+";
        }
        return res;
    }
}

