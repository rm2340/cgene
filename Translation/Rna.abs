module Rna;
export Rna, Folding, pairs;
export RnaGetters, RnaSecondaryStructure;
import * from Dna;


data Folding = Folding(Map<Int,Int> pairs);

interface Rna {
    Unit fold(Folding f);
    Unit insert(Rna newrna, Int pos);
    String getID();
    List<Nucleotide> getCode();
    Folding getFolding();
    String toDotBracket();
}

class Rna(Gene gene) implements Rna {
    String id = id(gene);
    List<Nucleotide> code = code(gene);
    Folding folding = Folding(map[]); // initially no folding

    uses RnaGetters;
    uses RnaSecondaryStructure;
}


trait RnaGetters = {
    String getID() {
        return id;
    }
    List<Nucleotide> getCode() {
        return code;
    }
    Folding getFolding() {
        return folding;
    }
}

trait RnaSecondaryStructure = {

    Unit fold(Folding f) {
        folding = f;
    }

    Unit insert(Rna insertedRna, [Final] Int pos) {
        List<Nucleotide> oldcode = code;
        List<Nucleotide> newcode = list[];
        Int lengthOldcode = length(oldcode);
        try assert pos < lengthOldcode;
        catch AssertionFailException => println("Cannot insert RNA at pos " + toString(pos));
        List<Nucleotide> inscode = await insertedRna!getCode();
        Int len = length(inscode);

        /****** 1. Insert Code at pos ******/
        // copy first <pos> elements
        // copy inserted code
        // copy rest of elements
        Int i = 0;
        while (i < pos) {
            newcode = appendright(newcode, head(oldcode));
            oldcode = tail(oldcode);
            i = i + 1;
        }
        newcode = concatenate(newcode, inscode);
        newcode = concatenate(newcode, oldcode);
        code = newcode;
        assert length(newcode) == lengthOldcode + length(inscode);

        /****** 2. Adjust Folding ******/
        // inserted molecule:
        Folding fi = await insertedRna!getFolding();
        Map<Int, Int> insmap = pairs(fi);
        Map<Int, Int> newmap = map[];
        List<Int> keys = elements(keys(insmap));

        while (! isEmpty(keys)) {
            Int k = head(keys);
            Int v = lookupUnsafe(insmap, k);
            assert k < v+1;
            assert lookup(newmap, k+pos) == Nothing;
            assert lookup(newmap, v+pos) == Nothing;
            newmap = put(newmap, k+pos, v+pos);
            keys = tail(keys);
        }
        assert length(entries(insmap)) == length(entries(newmap));

        // this molecule:
        Map<Int, Int> oldmap = pairs(folding);
        keys = elements(keys(oldmap));
        while(! isEmpty(keys)) {
            Int k = head(keys);
            Int v = lookupUnsafe(oldmap, k);
            assert k < v+1;
            if (v >= pos) {
                v = v+len;
                if (k >= pos)
                    k = k+len;
            }
            //println("put " + toString(k) + "->" + toString(v));
            assert lookup(newmap, k) == Nothing;
            assert lookup(newmap, v) == Nothing;
            newmap = put(newmap, k, v);
            keys = tail(keys);
        }
        //println(toString(length(entries(newmap))) + ": " + toString(newmap));
        // done
        folding = Folding(newmap);

        this.checkFolding();
    }

    // check whether folding is correct, i.e. only G-C and A-U pairs
    Unit checkFolding() {
        List<Pair<Int,Int>> pairs = entries(pairs(folding));
        while(!isEmpty(pairs)) {
            Pair<Int,Int> p = head(pairs);
            Nucleotide n1 = nth(code, fst(p));
            Nucleotide n2 = nth(code, snd(p));
            try assert validBasePair(n1,n2);
            catch AssertionFailException => println("Invalid base pair: " + toString(n1) + "-" + toString(n2));
            pairs = tail(pairs);
        }
    }

    String toDotBracket() {
        String primary = "";
        String secondary = "";
        Set<Int> keys = keys(pairs(folding));
        Set<Int> vals = set[];

        Int pos = 0;
        String char = "";
        foreach (n in code) {
            primary = primary + toString(n);
            if (contains(keys, pos)) {
                char = "(";
                vals = insertElement(vals, lookupUnsafe(pairs(folding), pos));
                println(toString(pos) + "--" + toString(lookupUnsafe(pairs(folding), pos)));
            } else if (contains(vals, pos))
                char = ")";
            else
                char = ".";
            secondary = secondary + char;
            pos = pos + 1;
        }
        return primary + "\n" + secondary;
    }

}
