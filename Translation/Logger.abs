module Logger;
export Logger, ProteinLogger, ProteinLoggerStdout;
import * from Cell;
import * from Runnable;

interface Logger extends Runnable {
    [HTTPCallable] Map<Rat,Int> getProteinLog();
}

trait Logging = {
    Unit log() {
        while(run) {
            this.logData(t_inc);
        }
        println("***Logger stopped");
    }
    Unit run() {
        this.log();
    }
}


class ProteinLogger([Final] Cell cell, Rat t_inc) implements Logger {

    Map<Rat,Int> chartData = map[];
    Bool run = True;

    uses RunnableControl;
    uses Logging;

    Unit logData(Rat t_inc) {
        Int n = await cell!getSumProtein();
        chartData = put(chartData, timeValue(now()) / 60, n);
        await duration(t_inc, t_inc);
    }

    Map<Rat,Int> getProteinLog() {
        Map<Rat,Int> d = chartData;
        chartData = map[];
        return d;
    }
}

class ProteinLoggerStdout([Final] Cell cell, Int t_inc) implements Runnable {

    Bool run = True;

    uses RunnableControl;
    uses Logging;

    Unit logData(Rat t_inc) {
        Int n = await cell!getSumProtein();
        println(toString(timeValue(now()) / 60) + " " + toString(n));
        await duration(t_inc, t_inc);

    }
}


