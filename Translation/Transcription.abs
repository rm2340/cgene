/* This very abstractly simulates transcription,
 * by generating random mRNA strands.
 * Corresponds to reaction: 0 -> mRNA (constant rate)
 */
module Transcription;
export Transcription;
import * from Mrna;
import * from Cell;


interface Transcription {
    Unit run();
    Mrna genMRNA(Int len);
}

class Transcription(Cell cell, Int rate) implements Transcription {

    Unit run() {
        //while(True) {
            Mrna mrna = this.genMRNA(1000);
            await cell!addMRNA(mrna);
            //duration(1/rate, 1/rate);
        //}
    }

    /*
     * Generate random mRNA molecule of length len codons
     */
    Mrna genMRNA(Int len) {
        // We build the list starting from the end (more efficient)
        // first, a stop codon
        List<Nucleotide> code = list[U, A, A];

        Int i = 0;
        while (i < len*3) {
            // Add 3 random nucleotides (a codon) to mrna strand
            Nucleotide n1 = nuc();
            Nucleotide n2 = nuc();
            Nucleotide n3 = nuc();
            if (!stop(list[n1,n2,n3])) { // don't want any stop codons
                code = Cons(n1, code);
                code = Cons(n2, code);
                code = Cons(n3, code);
                i = i+3;
            }
        }

        // lastly, a start codon (A,U,G)
        code = Cons(G, code);
        code = Cons(U, code);
        code = Cons(A, code);

        assert length(code) == 3*(len+2);
        println("mRNA list generated, length=" + toString(length(code)));
        return new Mrna(code);
    }

}

