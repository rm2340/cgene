/* This doesn't really simulate transcription yet, 
 * it just generates random mRNA strands...
 */
module Transcription;
export Transcription, Mrna;


// adenine, cytosine, guanine, uracil 
data Nucleotide = A | C | G | U;

def Nucleotide nuc() =
    case random(4) {
        0 => A;
        1 => C;
        2 => G;
        3 => U;
    };


/* // Would be nice if this would work...
def Bool stop(List<Nucleotide> codon) =
    case codon {
        list[U, A, A] => true;
        list[U, A, G] => true;
        list[U, G, A] => true;
        _ => false;
    };
*/

def Bool stop(List<Nucleotide> codon) =
    case codon {
        Cons(U, Cons(A, Cons(A, Nil))) => True;
        Cons(U, Cons(A, Cons(G, Nil))) => True;
        Cons(U, Cons(G, Cons(A, Nil))) => True;
        _ => False;
    };


interface Mrna {}
class Mrna(List<Nucleotide> mrna) implements Mrna {}


interface Transcription {
    Mrna genMRNA();
}
class Transcription implements Transcription {

    Mrna genMRNA() {
        // Start list with a start codon
		List<Nucleotide> codon = list[A, U, G];
		List<Nucleotide> mrna = codon;
		
		while (! stop(codon)) {
		    // Add random codon to mrna strand
		    codon = list[nuc(), nuc(), nuc()];
		    mrna = concatenate(mrna, codon);
		}
        return new Mrna(mrna);
        
        //println(toString(mrna));
    }

}    

