module Transcription;
export Transcription, TranscriptionA;
import * from Dna;
import * from Mrna;
import * from Cell;

interface Transcription {
    Mrna genMRNA(Gene gene);
    //===================
    Unit start();
    Unit stop();
    Bool isOn();
    Rat getRate();
    Unit run();
}

[Far]
class TranscriptionA([Final] Gene gene, [Final] Cell cell, Rat rate) implements Transcription {
    Bool run = True;
    uses Control;

    Unit run() {
        while(True) {
            await this.run;
            Mrna mrna = this.genMRNA(gene);
            await cell!addMrna(id(gene), mrna);
            duration(1/rate, 1/rate);
            //println("new mRNA " + toString(id(gene)));
        }
    }

    Mrna genMRNA(Gene gene) {
        return new Mrna(gene);
    }

}

[Far]
class Transcription([Final] Gene gene, [Final] Cell cell, Rat rate) implements Transcription {
/* TODO
   Implement more realistic/detailed DNA-mRNA transcription:
   - protein transcription factors bind to promoter sites, usually on the 5′ side of the gene
   - RNA polymerase (enzyme), binds to the complex of transcription factors
   - Working together, they open the DNA double helix
   - RNA polymerase proceeds to "read" one strand moving in its 3′ → 5′ direction
   - As the RNA polymerase travels along the DNA strand, it assembles ribonucleotides into a strand of RNA
   - Each ribonucleotide is inserted into the growing RNA strand following the rules of base pairing.

 * from: http://www.biology-pages.info/T/Transcription.html
 */
    Bool run = True;
    uses Control;
    Unit run() {}

    Mrna genMRNA(Gene gene) {
        return new Mrna(gene);
    }
}



[Far]
class TranscriptionRandom([Final] Cell cell, Rat rate) implements Transcription {
    Bool run = True;
    uses Control;

    Unit run() {
        while(True) {
            Mrna mrna = this.genMRNA(Gene("", list[]));
            await cell!addMrna("Random", mrna);
            duration(1/rate, 1/rate);
        }
    }

    Mrna genMRNA(Gene gene) {
        return this.randMRNA(1000);
    }

    /*
     * Generate random mRNA molecule of length len codons
     */
    Mrna randMRNA(Int len) {
        // We build the list starting from the end (more efficient)
        // first, a stop codon
        List<Nucleotide> code = list[U, A, A];

        Int i = 0;
        while (i < len*3) {
            // Add 3 random nucleotides (a codon) to mrna strand
            Nucleotide n1 = nuc();
            Nucleotide n2 = nuc();
            Nucleotide n3 = nuc();
            if (!stop(list[n1,n2,n3])) { // don't want any stop codons
                code = Cons(n1, code);
                code = Cons(n2, code);
                code = Cons(n3, code);
                i = i+3;
            }
        }

        // lastly, a start codon (A,U,G)
        code = Cons(G, code);
        code = Cons(U, code);
        code = Cons(A, code);

        assert length(code) == 3*(len+2);
        println("mRNA list generated, length=" + toString(length(code)));
        return new Mrna(Gene("Random", code));
    }

}



trait Control = {
    Rat getRate() { return rate; }
    Unit start() { run = True; }
    Unit stop() { run = False; }
    Bool isOn() { return run; }

}


