module Dna;
export Gene, id, code;
export Nucleotide, A, C, G, U, nuc, stop, validBasePair;


data Gene = Gene(String id, List<Nucleotide> code);

// adenine, cytosine, guanine, uracil
data Nucleotide = A | C | G | U;

def Nucleotide nuc() =
    case random(4) {
        0 => A;
        1 => C;
        2 => G;
        3 => U;
    };

/* // Would be nice if this would work...
def Bool stop(List<Nucleotide> codon) =
    case codon {
        list[U, A, A] => true;
        list[U, A, G] => true;
        list[U, G, A] => true;
        _ => false;
    };
*/

def Bool stop(List<Nucleotide> codon) =
    case codon {
        Cons(U, Cons(A, Cons(A, Nil))) => True;
        Cons(U, Cons(A, Cons(G, Nil))) => True;
        Cons(U, Cons(G, Cons(A, Nil))) => True;
        _ => False;
    };

def Bool validBasePair(Nucleotide n1, Nucleotide n2) =
    case n1 {
        A => case n2 {
            U => True;
            _ => False;
        };
        U => case n2 {
            A => True;
            _ => False;
        };
        C => case n2 {
            G => True;
            _ => False;
        };
        G => case n2 {
            C => True;
            _ => False;
        };
    };

// TODO represent DNA double helix as data (?), use this for transcription.
