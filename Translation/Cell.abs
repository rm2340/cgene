module Cell;
export Cell, setToList;
import * from Transcription;
import * from Dna;
import * from Mrna;
import * from Ribosome;
import * from Protein;
import * from Degradation;
//import * from Logger;
//import * from Main;

def List<A> setToList<A>(Set<A> s) =
    if hasNext(s)
    then let (Pair<Set<A>,A> res) = next(s) in Cons(snd(res),setToList(fst(res)))
    else Nil;

interface Cell {
    Unit addMrna(String id, Mrna mrna);
    Mrna getMrna();
    Unit addProtein(Protein prot);
    Unit addRibosome(Ribosome ribo);

    Int getSumProtein();
    Int getQuantMrna(String id);
    Int getSumMrna();
    String getInfoMrna();
    Int getQuantRibosome();

    Unit removeProtein();
    Unit removeMrna(String id);
    Unit removeRibosomes(Int n);
}

/*
 * A cell is essentially a container for the actors (reactants)
 * DNAs, MRNAs, Ribosomes, Proteins, etc
 */
class Cell implements Cell {

    Map<String, List<Mrna>> mrnas = map[];
    //List<Mrna> mrnaStrands = list[];
    List<Protein> proteins = list[];
    Set<Ribosome> ribosomes = set[];

    /*
    Unit addMRNA(Mrna mrna) {
        mrnaStrands = appendright(mrnaStrands, mrna);
    }*/
    Unit addMrna(String id, Mrna mrna) {
        if (lookup(mrnas, id) == Nothing)
            mrnas = put(mrnas, id, list[]);
        List<Mrna> li = lookupUnsafe(mrnas, id);
        li = appendright(li, mrna);
        mrnas = put(mrnas, id, li);
    }


    Unit addRibosome(Ribosome ribo) {
        ribosomes = insertElement(ribosomes, ribo);
    }

    Unit removeRibosomes(Int n) {
        assert size(ribosomes) >= n;
        while(n > 0) {
            Ribosome r = take(ribosomes);
            await r!stop();
            ribosomes = remove(ribosomes, r);
            n = n - 1;
        }
    }

    Unit addProtein(Protein prot) {
        proteins = appendright(proteins, prot);
        println("New Protein " + proteinID(prot) + " (" + toString(length(proteins)) + ")");
    }

    Int getSumProtein() {
        await length(proteins) > 0;
        return length(proteins);
    }
    Unit removeProtein() {
        assert length(proteins) > 0;
        proteins = tail(proteins);
    }

    Int getQuantMrna(String id) {
        await lookup(mrnas, id) != Nothing;
        await length(lookupUnsafe(mrnas, id)) > 0;
        return length(lookupUnsafe(mrnas, id));
    }
    Int getSumMrna() {
        List<String> keys = elements(keys(mrnas));
        Int sum = 0;
        while(! isEmpty(keys)) {
            String id = head(keys);
            keys = tail(keys);
            sum = sum + length(lookupUnsafe(mrnas, id));
        }
        return sum;
    }
    String getInfoMrna() {
        List<String> keys = elements(keys(mrnas));
        String s = "";
        while(! isEmpty(keys)) {
            String id = head(keys);
            s = s + id + "(" + toString(length(lookupUnsafe(mrnas, id))) + ") ";
            keys = tail(keys);
        }
        return s;
    }

    Unit removeMrna(String id) {
        await length(lookupUnsafe(mrnas, id)) > 0;
        mrnas = put(mrnas, id, tail(lookupUnsafe(mrnas, id)));
    }
    Int getQuantRibosome() {
        return size(ribosomes);
    }


    /****************************************************************
     *** HTTP Callables ***
     */
    /***************************************************************/

    // Randomly return one of the mRNA strands for decoding
    Mrna getMrna() {
        await(size(keys(mrnas)) > 0);
        List<String> keys = elements(keys(mrnas));
        String id = nth(keys, random(length(keys)));
        await length(lookupUnsafe(mrnas, id)) > 0;
        Int n = random(length(lookupUnsafe(mrnas, id)));
        Mrna mrna = nth(lookupUnsafe(mrnas, id), n);
        return mrna;
    }
}


