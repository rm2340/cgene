module Cell;
export Cell, setToList;
import * from Transcription;
import * from Translation;
import * from Dna;
import * from Mrna;
import * from Protein;
import * from Degradation;
//import * from Logger;
//import * from Main;

def List<A> setToList<A>(Set<A> s) =
    if hasNext(s)
    then let (Pair<Set<A>,A> res) = next(s) in Cons(snd(res),setToList(fst(res)))
    else Nil;

interface Cell {
    Unit addMrna(String id, Mrna mrna);
    Mrna getMrna();
    Int getQuantMrna(String id);
    Int getSumMrna();
    String getInfoMrna();
    Unit removeMrna(String id);

    Unit addProtein(Protein prot);
    Int getSumProtein();
    Int getSumProteinGtZero();
    Unit removeProtein();
    Unit removeProteins(Int n);

    Unit setLigand(Bool c);
    Bool getLigand();

    Bool consumeATP();
    Translation getTranslation();
    Unit setTranslation(Translation tl);

    Degradation getGrowth();
    Unit setGrowth(Degradation g);
}



/*
 * A cell is essentially a container for the actors (reactants)
 * DNAs, MRNAs, Ribosomes (->managed by Translation object), Proteins, etc
 */
class Cell implements Cell {

    Map<String, List<Mrna>> mrnas = map[];
    //List<Mrna> mrnaStrands = list[];
    List<Protein> proteins = list[];
    Int energy = 500000;
    Bool tc = False;  // Tetracycline on/off. We abstract from the actual concentration in microMol (range 0 ~ 500)
    Translation translation;
    Degradation growth;

    Unit setTranslation(Translation tl) {
        translation = tl;
    }
    Translation getTranslation() {
        return translation;
    }
    Unit setGrowth(Degradation g) {
        growth = g;
    }
    Degradation getGrowth() {
        return growth;
    }

    /*
    Unit addMRNA(Mrna mrna) {
        mrnaStrands = appendright(mrnaStrands, mrna);
    }*/
    Unit addMrna(String id, Mrna mrna) {
        if (lookup(mrnas, id) == Nothing)
            mrnas = put(mrnas, id, list[]);
        List<Mrna> li = lookupUnsafe(mrnas, id);
        li = appendright(li, mrna);
        mrnas = put(mrnas, id, li);
        await mrna!setCell(this);
    }


    Unit addProtein(Protein prot) {
        proteins = appendright(proteins, prot);
        //println(toString(now()) + " New Protein " + proteinID(prot) + " (" + toString(length(proteins)) + ")");
        //println("New protein l=" + toString(length(proteinAminoacids(prot))));
    }

    Int getSumProtein() {
        return length(proteins);
    }
    Int getSumProteinGtZero() {
        await length(proteins) > 0; // degradation relies on this
        return length(proteins);
    }
    Unit removeProtein() {
        assert length(proteins) > 0;
        proteins = tail(proteins);
        //println("Removed 1 protein");
    }
    Unit removeProteins(Int n) {
        Int i = 0;
        while (i < n) {
            this.removeProtein();
            i = i+1;
        }
    }

    Int getQuantMrna(String id) {
        await lookup(mrnas, id) != Nothing;
        await length(lookupUnsafe(mrnas, id)) > 0;
        return length(lookupUnsafe(mrnas, id));
    }
    Int getSumMrna() {
        List<String> keys = elements(keys(mrnas));
        Int sum = 0;
        while(! isEmpty(keys)) {
            String id = head(keys);
            keys = tail(keys);
            sum = sum + length(lookupUnsafe(mrnas, id));
        }
        return sum;
    }
    String getInfoMrna() {
        List<String> keys = elements(keys(mrnas));
        String s = "";
        while(! isEmpty(keys)) {
            String id = head(keys);
            s = s + id + "(" + toString(length(lookupUnsafe(mrnas, id))) + ") ";
            keys = tail(keys);
        }
        return s;
    }

    Unit removeMrna(String id) {
        await length(lookupUnsafe(mrnas, id)) > 0;
        mrnas = put(mrnas, id, tail(lookupUnsafe(mrnas, id)));
    }


    /****************************************************************
     *** HTTP Callables ***
     */
    /***************************************************************/

    // Randomly return one of the mRNA strands for decoding
    Mrna getMrna() {
        await(size(keys(mrnas)) > 0);
        List<String> keys = elements(keys(mrnas));
        String id = nth(keys, random(length(keys)));
        await length(lookupUnsafe(mrnas, id)) > 0;
        Int n = random(length(lookupUnsafe(mrnas, id)));
        Mrna mrna = nth(lookupUnsafe(mrnas, id), n);
        return mrna;
    }

    Bool consumeATP() {
        Bool available = energy > 0;
        if (available)
            energy = energy-1;
        return available;
    }

    Unit setLigand(Bool c) {
        tc = c;
    }
    Bool getLigand() {
        return tc;
    }
}




