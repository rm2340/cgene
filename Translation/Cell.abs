module Cell;
export Cell, setToList;
import * from Transcription;
import * from Dna;
import * from Mrna;
import * from Ribosome;
import * from Protein;
import * from Degradation;
import * from Logger;
import * from Model;

def List<A> setToList<A>(Set<A> s) =
    if hasNext(s)
    then let (Pair<Set<A>,A> res) = next(s) in Cons(snd(res),setToList(fst(res)))
    else Nil;

interface Cell {
    Unit addMRNA(Mrna mrna);
    Unit addRibosome(Ribosome ribo);
    Unit removeRibosomes(Int n);
    Unit addProtein(Protein prot);
    Mrna obtainMrna();

    Int getQuantProtein();
    Int getQuantMrna();
    Int getQuantRibosome();

    Unit degradeProtein();
    Unit degradeMrna();

    [HTTPCallable] Pair<Time, Int> getMrnaInfo();
    [HTTPCallable] Pair<Time, Int> getProtInfo();
    [HTTPCallable] Pair<Time, Int> getRiboInfo();
}

class Cell implements Cell {
    Map<Gene, List<Mrna>> mrnas = map[];


    List<Mrna> mrnaStrands = list[];
    List<Protein> proteins = list[];
    Set<Ribosome> ribosomes = set[];

    Unit addMRNA(Mrna mrna) {
        mrnaStrands = appendright(mrnaStrands, mrna);
    }
    Unit addMRNA(Gene gene, Mrna mrna) {
        mrnas = put(mrnas, gene, mrna);
    }


    Unit addRibosome(Ribosome ribo) {
        ribosomes = insertElement(ribosomes, ribo);
    }

    Unit removeRibosomes(Int n) {
        assert size(ribosomes) >= n;
        while(n > 0) {
            Ribosome r = take(ribosomes);
            await r!stop();
            ribosomes = remove(ribosomes, r);
            n = n - 1;
        }
    }

    Unit addProtein(Protein prot) {
        proteins = appendright(proteins, prot);
        println("New Protein " + proteinID(prot) + " (" + toString(length(proteins)) + ")");
    }

    Int getQuantProtein() {
        await length(proteins) > 0;
        return length(proteins);
    }
    Unit degradeProtein() {
        assert length(proteins) > 0;
        proteins = tail(proteins);
    }
    Int getQuantMrna() {
        await length(mrnaStrands) > 0;
        return length(mrnaStrands);
    }

    /****************************************************************
     *** HTTP Callables ***
     */
    Pair<Time,Int> getMrnaInfo() {
        return Pair(now(), length(mrnaStrands));
    }
    Pair<Time,Int> getProtInfo() {
        return Pair(now(), length(proteins));
    }
    Pair<Time,Int> getRiboInfo() {
        return Pair(now(), size(ribosomes));
    }
    /***************************************************************/

    Unit degradeMrna() {
        assert length(mrnaStrands) > 0;
        mrnaStrands = tail(mrnaStrands);
    }

    Int getQuantRibosome() {
        return size(ribosomes);
    }

    // Randomly return one of the mRNA strands for decoding
    Mrna obtainMrna() {
        await length(mrnaStrands) > 0;
        Int n = random(length(mrnaStrands));
        Mrna mrna = nth(mrnaStrands, n);
        //String s = await mrna!toString();
        //println("Cell: offering mRNA: " + s);
        return mrna;
    }
}


