module Mrna;
export Mrna;
import * from Dna;
import * from Rna;
import * from Ribosome;
import * from Cell;

/* Test whether ribosomes are present between positions first and last.
 * This would prevent a ribosome to advance.
 */
def Bool freeToAdvance<T>(Map<Int, T> map, Int first, Int last) =
    case first <= last {
        True => case lookup(map, first) {
            Nothing => freeToAdvance(map, first+1, last);
            _ => False;
        };
        False => True;
    };

interface Mrna extends Rna {
    Bool attach(Ribosome rib);
    Unit detach(Ribosome rib, Int pos);
    Int advance(Ribosome rib, Int pos, Int distance);
    Nucleotide readNucleotide(Int pos);
    Unit setInhibitionFactor(Int f);
    String toString();
}

class Mrna([Final] Gene gene) implements Mrna {
    String id = id(gene);
    Cell cell; // set it when adding this rna to a cell
    List<Nucleotide> code = code(gene);
    Folding folding = Folding(map[]); // initially no folding

    // This map remembers the positions of ribosomes in the mRNA strand
    // Only one ribosome can be at a certain position
    Map<Int, Ribosome> occupancy = map[];

    // Minimal distance (nucleotides) between ribosomes on the mRNA strand
    [Final] Int ribWidth = 30;
    Int inhibitionFactor = 4; // Used to compute ribosome binding inhibition based on nr of aptamers, see inhibitedBySecondary()

    // init block (constructor)
    {}

    uses RnaGetters;
    uses RnaSecondaryStructure;

    /* Attach ribosome at beginning of the strand ("ribosomal binding unit")
     * Return True if ribosome could attach, else False
     */
    Bool attach(Ribosome rib) {
        Bool inhib = this.inhibitedBySecondary();
        Bool can = !inhib;

        if (can) {
            await freeToAdvance(occupancy, 0, ribWidth);
            occupancy = put(occupancy, 0, rib);
            assert lookup(occupancy, 0) == Just(rib);

            /*
            print(toString(rib) + " attached to mRNA");
            String s = this.occupancyToString();
            println(" - Occupancy: " + s);
            */
        }
        return can;
    }

    /* Move the Ribosome rib from position pos to pos+distance (<distance> nucleotides further)
     * Return new position.
     */
    Int advance([Final] Ribosome rib, [Final] Int pos, [Final] Int distance) {
        assert pos < length(code) - 1;
        //wait until next position is free
        await freeToAdvance(occupancy, pos+1, pos+distance+ribWidth);

        // clear current pos & move rib to next pos
        assert lookup(occupancy, pos) == Just(rib);
        occupancy = put(removeKey(occupancy, pos), pos+distance, rib);
        return pos+distance;
    }

    Unit setInhibitionFactor(Int f) {
        inhibitionFactor = f;
    }

    /* Determine whether a ribosome can attach
     * based on existence of aptamers and ligand
     * crude formula...
     * TODO make this configurable through web interface
     */
    Bool inhibitedBySecondary() {
        Bool can = True;
        Bool lig = await cell!getLigand(); // ligand present?

        Int stems = this.secondaryStructureStems();
        //println("Stems " + toString(stems));

        // [0..1]
        Rat inhib = pow(1/inhibitionFactor, stems);

        Int rand = random(10000);
        can = rand < 10000 * inhib;

        //println("rand=" + toString(rand) + " < " + toString(float(inhib*10000)) + " => can=" + toString(can));

        return lig && !can;
        //return False;
    }

    Unit detach([Final] Ribosome rib, [Final] Int pos) {
        // clear pos
        assert lookup(occupancy, pos) == Just(rib);
        occupancy = removeKey(occupancy, pos);
        //println("---Ribosome detached from mRNA");
    }

    Nucleotide readNucleotide([Final] Int pos) {
        try assert pos < length(code);
        catch AssertionFailException => println("Attempt to read past end of mRNA (no stop codon?)");
        return nth(code, pos);
    }

    String toString() {
        return id + ": " + toString(code);
    }

    String occupancyToString() {
        String res = "";

        List<Int> keys = setToList(keys(occupancy));
        foreach (k in keys)
            res = res + toString(k) + " ";
        return res;
    }

}


