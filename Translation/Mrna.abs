module Mrna;
export Mrna;
import * from Dna;
import * from Rna;
import * from Ribosome;
import * from Cell;

interface Mrna extends Rna {
    Bool attach(Ribosome rib);
    Unit detach(Ribosome rib, Int pos);
    Bool canAdvance(Ribosome rib, Int pos);
    Int advance(Ribosome rib, Int pos);
    Nucleotide readNucleotide(Int pos);
    String toString();
}

class Mrna(Gene gene) implements Mrna {
    String id = id(gene);
    List<Nucleotide> code = code(gene);
    Folding folding = Folding(map[]); // initially no folding

    // This map remembers the positions of ribosomes in the mRNA strand
    // Only one ribosome can be at a certain position
    Map<Int, Maybe<Ribosome>> occupancy = map[];

    // init block (constructor)
    {
        Int i = 0;
        while(i < length(code)) {
            occupancy = put(occupancy, i, Nothing);
            i = i + 1;
        }
    }

    uses RnaGetters;
    uses RnaSecondaryStructure;

    /* Attach ribosome at beginning of the strand ("ribosomal binding unit")
     * Ribosome has a certain size, so another ribosome can only attach if the next ribosome is far enough away (~30 nucleotides)
     * Return True if ribosome attached, else False
     */
    Bool attach(Ribosome rib) {
        Bool can = True;
        [Final] Int riboSize = 30;
        Int i = 0;
        while (i < riboSize) {
            if (lookupUnsafe(occupancy, i) != Nothing) {
                can = False;
                i = riboSize; // break
            }
            i = i+1;
        }
        if (can)
            occupancy = put(occupancy, 0, Just(rib));
        return can;
    }

    Unit detach(Ribosome rib, Int pos) {
        // assume rib is indeed at pos
        assert lookupUnsafe(occupancy, pos) == Just(rib);

        // clear pos
        occupancy = put(occupancy, pos, Nothing);
        //println("Ribosome detached from mRNA");
    }

    /* Determine whether a ribosome can advance past the given position
     * ...based on existence of secondary structure at pos
     */
    Bool canAdvance(Ribosome rib, Int pos1) {
        Bool can = True;
        /* FIXME */
        Cell cell = await rib!getCell();
        Int ligand = await cell!getLigand();
        Rat inhib = ligand/10;
        can = random(100) < 100 - inhib;

        return can;
    }

    /* Return strength of secondary structure at pos1
     * - based on total nr of hydrogen bonds at pos1 and following
     * A-U -> 2
     * G-C -> 3
     */
    Int secondaryStructureStrengthAtPos(Int pos1) {
        Int bond = 0;
        Maybe<Int> pos2 = lookup(pairs(folding), pos1);
        while (isJust(pos2)) {
            Nucleotide n1 = nth(code, pos1);
            Nucleotide n2 = nth(code, fromJust(pos2));
            if (n1 == A) {
                assert n2 == C;
                bond = bond + 2;
            } else if (n1 == C) {
                assert n2 == A;
                bond = bond + 2;
            } else if (n1 == G) {
                assert n2 == U;
                bond = bond + 3;
            } else if (n1 == U) {
                assert n2 == G;
                bond = bond + 3;
            }
            // assuming there can be no pairing on the last base of the mRNA
            pos1 = pos1 + 1;
            pos2 = lookup(pairs(folding), pos1);

            //println(toString(n1) + "--" + toString(n2));
        }
        return bond;
    }

    /* Move the Ribosome rib from position pos to pos+1 (one nucleotide further)
     *
     */
    Int advance(Ribosome rib, Int pos) {
        assert pos < length(code) - 1;
        //wait until next position is free
        //println("waiting before pos " + toString(pos+1));
        await(lookupUnsafe(occupancy, pos+1) == Nothing);

        // clear current pos & move rib to next pos
        occupancy = put(put(occupancy, pos, Nothing), pos+1, Just(rib));

        //String s = this.occupancyToString();
        //println("Occupancy: " + s);
        return pos+1;
    }

    Nucleotide readNucleotide(Int pos) {
        assert pos < length(code);
        return nth(code, pos);
    }


    String toString() {
        return id + ": " + toString(code);
    }
    String occupancyToString() {
        String res = "";
        Int i = 0;
        while(i < size(keys(occupancy))) {
            if (lookupUnsafe(occupancy, i) == Nothing)
                res = res + "- ";
            else
                res = res + "* ";
            i = i + 1;
        }
        return res;
    }
}
