module Mrna;
export Mrna;
import * from Dna;
import * from Rna;
import * from Ribosome;
import * from Cell;

interface Mrna extends Rna {
    Bool attach(Ribosome rib);
    Unit detach(Ribosome rib, Int pos);
    String toString();
}

class Mrna(Gene gene) implements Mrna {
    String id = id(gene);
    Cell cell; // set it when adding this rna to a cell
    List<Nucleotide> code = code(gene);
    Folding folding = Folding(map[]); // initially no folding

    // Keep track of how many ribosomes are currently decoding
    // This way we can limit the number of concurrently decoding ribosomes
    Int ribosomes = 0;

    // init block (constructor)
    {}

    uses RnaGetters;
    uses RnaSecondaryStructure;

    /* Attach ribosome at beginning of the strand ("ribosomal binding unit")
     * Return True if ribosome could attach, else False
     */
    Bool attach(Ribosome rib) {
        Bool inhib = this.inhibitedBySecondary();

        if (!inhib) {
            ribosomes = ribosomes + 1;
            //print(toString(ribosomes) + "  ");

            //print("+++Ribosome " + toString(rib) + " attached to mRNA");
            //String s = this.occupancyToString();
            //println(" - Occupancy: " + s);
        }
        return !inhib;
    }


    /* Determine whether a ribosome can attach
     * based on existence of aptamers and ligand
     * crude formula... FIXME
     */
    Bool inhibitedBySecondary() {
        Bool can = True;

        Int ss = this.secondaryStructureStrength();
        Int f = 110; // summand
        Int n = 495; // factor
        Int lig = await cell!getLigand(); // ligand conncentration

        Rat inhib = ((ss + f) * lig) / n;
        can = random(100) < 100 - inhib;
        //println("Inhibition [0..100+] : " + toString(truncate(inhib)) + " --- Can attach: " + toString(can));

        // return !can;
        return False;
    }


    Unit detach([Final] Ribosome rib, [Final] Int pos) {
        ribosomes = ribosomes - 1;
        //println("---Ribosome detached from mRNA");
    }

    String toString() {
        return id + ": " + toString(code);
    }

}
