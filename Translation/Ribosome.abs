module Ribosome;
export Ribosome;
import * from Mrna;
import * from Cell;
import * from Protein;

interface Ribosome {
    Unit run();
}


/* Model of a ribosome
 * synthesizing protein from mRNA
 */
class Ribosome(Cell cell) implements Ribosome {

    Int position = -1; // The ribosome's current position on the mRNA strand

    Unit run() {
        while (True) {
            /* Try to obtain mRNA; if successful,
             *     attach to mRNA,
             *     decode mRNA (ste by step),
             *     detach upon encountering stop codon
             */
            Mrna mrna = await cell!obtainMrna();
            position = await mrna!attach(this);
            if (position >= 0) {
                this.decode(mrna);
                println("Start decoding mrna");
            } else {
                //println("Ribosome failed to attach to mRNA");
            }
        }
    }

    Unit decode(Mrna mrna) {
        assert position >= 0;
        Protein prot = new Protein();
        Bool stop = False;
        while(!stop) {
            // read codon
            List<Nucleotide> codon = this.readCodon(mrna);
            if (stop(codon)) {
                stop = True;
                await mrna!detach(this, position);
                println("Stop decoding mrna");
                await cell!addProtein(prot);
            } else {
                //print("Codon: " + toString(codon));
                Aminoacid a = aminoacid(nth(codon, 0), nth(codon, 1), nth(codon, 2));
                //println("  --> Aminoacid: " + toString(a));
                await prot!add(a);

                // on average, mrna strand has 64/3=21 nucleotides...
                // very crude way to say that decoding the entire mrna should take 1 time unit
                // duration(3/64, 3/64);
                // but currently we have a fixed duration for deconding any mrna (see Mrna.detach)
            }
        }
    }

    List<Nucleotide> readCodon(Mrna mrna) {
        List<Nucleotide> codon = list[];
        Int i = 0;
        while (i < 3) {
            Nucleotide n = await mrna!readNucleotide(position);
            appendright(codon, n);
            await mrna!advance(this, position);
            position = position + 1;
        }
        return codon;
    }

}


// decode codon into specific amino acid
def Aminoacid aminoacid(Nucleotide n1, Nucleotide n2, Nucleotide n3) =
    case n1 {
        U => case n2 {
            U => case n3 {
                U => Phe;
                C => Phe;
                A => Leu;
                G => Leu;
            };
            C => Ser;
            A => case n3 {
                U => Tyr;
                C => Tyr;
                A => Stp;
                G => Stp;
            };
            G => case n3 {
                U => Cys;
                C => Cys;
                A => Stp;
                G => Trp;
            };
        };
        C => case n2 {
            U => Leu;
            C => Pro;
            A => case n3 {
                U => His;
                C => His;
                A => Gln;
                G => Gln;
            };
            G => Arg;
        };
        A => case n2 {
            U => case n3 {
                U => Ile;
                C => Ile;
                A => Ile;
                G => Met;
            };
            C => Thr;
            A => case n3 {
                U => Asn;
                C => Asn;
                A => Lys;
                G => Lys;
            };
            G => case n3 {
                U => Ser;
                C => Ser;
                A => Arg;
                G => Arg;
            };
        };
        G => case n2 {
            U => Val;
            C => Ala;
            A => case n3 {
                U => Asp;
                C => Asp;
                A => Glu;
                G => Glu;
            };
            G => Gly;
        };
    };
