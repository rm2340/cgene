module Ribosome;
export Ribosome;
import * from Dna;
import * from Mrna;
import * from Cell;
import * from Protein;

interface Ribosome {
    Unit stop();
    Cell getCell();
}


/* Model of a ribosome
 * synthesizing protein from mRNA
 */
class Ribosome(
        [Final] Cell cell,
        [Final] Rat mrnaSearchDuration,
        [Final] Rat ribosomeAttachDuration,
        // Translation rate bases/minute (constant)
        // 10-50 bases/s <= http://book.bionumbers.org/how-many-mrnas-are-in-a-cell/
        // 12-21 bases/s <= http://bionumbers.hms.harvard.edu/bionumber.aspx?&id=100059
        [Final] Rat codonDecodingDuration) implements Ribosome {

    List<Nucleotide> codeBuffer = list[];

    /*
     * Variables
     */
    Bool run = True;
    Bool attached = False;
    Mrna mrna;
    Int position = -1; // The ribosome's current position on the mRNA strand
    String mrnaID = ""; // The mRNA's name (id)

    Cell getCell() { return cell; }


    Unit run() {
        while (run) {
            /* Try to obtain mRNA; if successful,
             *     attach to mRNA,
             *     scan 5'UTR for start codon
             *     decode mRNA (codon by codon),
             *     detach upon encountering stop codon
             */
            mrna = await cell!getMrna();
            attached = await mrna!attach(this);
            await duration(ribosomeAttachDuration, ribosomeAttachDuration); // attachment (or attempt) has a cost...
            position = 0;
            if (attached) {
                mrnaID = await mrna!getID();
                codeBuffer = await mrna!getCode();
                this.scan();
                this.decode();
            } else {
                //println("Ribosome failed to attach to mRNA; wait " + toString(w));
            }
            await duration(mrnaSearchDuration, mrnaSearchDuration);
        }
        //println("***Ribosome retired");
    }

    Unit stop() {
        run = False;
        // Detaching from the mRNA while decoding can lead to NullPointerExceptions
        // so we just let the ribosome decode till the end
    }

    /* Scan 5'UTR, look for the start codon (AUG)
     */
    Unit scan() {
        Bool start = False;
        while (!start) {
            Nucleotide n = this.readNucleotide(position);
            this.advance(1);
            if (n == A) {
                n = this.readNucleotide(position);
                this.advance(1);
                if (n == U) {
                    n= this.readNucleotide(position);
                    this.advance(1);
                    if (n == G) {
                        start = True;
                    }
                }
            }
        }
    }

    Unit decode() {
        Int codonsDecoded = 0;
        //println("Ribosome " + toString(this) + " starts decoding mrna at pos " + toString(position));
        List<Aminoacid> aminoacids = list[];
        Bool stop = False;
                //Rat t = ribosomeAttachDuration + codonsDecoded * codonDecodingDuration;
        while(run && !stop) {
            // read codon
            //println("position: " + toString(position));
            List<Nucleotide> codon = this.readCodon();
            if (stop(codon)) /* STOP; add protein */ {
                stop = True;
                //println("Ribosome stops decoding mrna; at pos " + toString(position));
                this.detach();
                //println("Stop decoding mrna");
                await cell!addProtein(Protein(mrnaID, aminoacids));
                //Rat t = ribosomeAttachDuration + codonsDecoded * codonDecodingDuration;
                //await duration(t,t);
                //println("Stop codon reached, docoding took " + toString(float(t)) + " time units");
            } else /* DECODE */ {
                //print("Codon: " + toString(codon));
                Aminoacid aa = aminoacid(nth(codon, 0), nth(codon, 1), nth(codon, 2));
                //println("  --> Aminoacid: " + toString(aa));
                aminoacids = appendright(aminoacids, aa);
                codonsDecoded = codonsDecoded + 1;
                /*
                Bool hasATP = await cell!consumeATP();
                if (! hasATP) { // cell is out of energy
                    stop = True;
                    this.detach();
                }
                */
                await duration(codonDecodingDuration, codonDecodingDuration);
                this.advance(3);
            }
         }
    }

    List<Nucleotide> readCodon() {
        List<Nucleotide> codon = list[];
        // #1
        Nucleotide n = this.readNucleotide(position);
        codon = appendright(codon, n);
        // #2
        n = this.readNucleotide(position+1);
        codon = appendright(codon, n);
        // #3
        n = this.readNucleotide(position+2);
        codon = appendright(codon, n);
        assert length(codon) == 3;
        return codon;
    }

    Nucleotide readNucleotide([Final] Int pos) {
        assert pos < length(codeBuffer);
        return nth(codeBuffer, pos);
    }

    /* Advance d nucleotides along the mRNA strand
     */
    Unit advance([Final] Int d) {
        position = await mrna!advance(this, position, d);
    }

    /* Detach from mRNA strand
     */
    Unit detach() {
        await mrna!detach(this, position);
        attached = False;
        position = -1;
        mrna = null;
        mrnaID = "";
    }


}


// decode codon into specific amino acid
def Aminoacid aminoacid(Nucleotide n1, Nucleotide n2, Nucleotide n3) =
    case n1 {
        U => case n2 {
            U => case n3 {
                U => Phe;
                C => Phe;
                A => Leu;
                G => Leu;
            };
            C => Ser;
            A => case n3 {
                U => Tyr;
                C => Tyr;
            };
            G => case n3 {
                U => Cys;
                C => Cys;
                G => Trp;
            };
        };
        C => case n2 {
            U => Leu;
            C => Pro;
            A => case n3 {
                U => His;
                C => His;
                A => Gln;
                G => Gln;
            };
            G => Arg;
        };
        A => case n2 {
            U => case n3 {
                U => Ile;
                C => Ile;
                A => Ile;
                G => Met;
            };
            C => Thr;
            A => case n3 {
                U => Asn;
                C => Asn;
                A => Lys;
                G => Lys;
            };
            G => case n3 {
                U => Ser;
                C => Ser;
                A => Arg;
                G => Arg;
            };
        };
        G => case n2 {
            U => Val;
            C => Ala;
            A => case n3 {
                U => Asp;
                C => Asp;
                A => Glu;
                G => Glu;
            };
            G => Gly;
        };
    };
