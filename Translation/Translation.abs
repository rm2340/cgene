module Translation;
export Translation;
import * from Runnable;
import * from Cell;
import * from Ribosome;

interface Translation extends Runnable {
    Int getQRibosome();
    Unit addRibosome(Ribosome ribo);
    Unit removeRibosomes(Int n);
}

/*
 * TODO: parametrize translation to a certain RNA (gene) ?
 */
class Translation(
        [Final] Cell cell,
        [Final] Int nribo,
        [Final] Rat tsearch,
        [Final] Rat tattach,
        [Final] Rat tdecode) implements Translation {

    Set<Ribosome> ribosomes = set[];

    Unit run() {
        await cell!setTranslation(this);
        this.createRibosomes();
    }

    /* Populate cell with ribosomes
     * Translation of proteins in E. coli is carried out by ~10,000-100,000 ribosomes
     * Ribosomes start translating as soon as they are created
     */
    Unit createRibosomes() {
        Int i = 0;
        while (i < nribo) {
            Ribosome r = new Ribosome(cell, tsearch, tattach, tdecode);
            i = i + 1;
            ribosomes = insertElement(ribosomes, r);
        }
        assert size(ribosomes) == nribo;
    }

    Unit addRibosome(Ribosome ribo) {
        ribosomes = insertElement(ribosomes, ribo);
    }

    Unit removeRibosomes(Int n) {
        try assert size(ribosomes) >= n;
        catch AssertionFailException => println("ERROR Not enough ribosomes to remove " + toString(n));
        while(n > 0) {
            Ribosome r = take(ribosomes);
            r!stop();
            ribosomes = remove(ribosomes, r);
            n = n - 1;
        }
    }

    Int getQRibosome() {
        return size(ribosomes);
    }


    Unit start() {
        // TODO?
    }
    /*
     * Stop translation by stopping/killing all ribosomes
     */
    Unit stop() {
        while(size(ribosomes) > 0) {
            Ribosome r = take(ribosomes);
            await r!stop();
            //r!stop();
            ribosomes = remove(ribosomes, r);
        }
        println("***Translation stopped");
    }

    Bool isOn() {
        return size(ribosomes) > 0;
    }

}

