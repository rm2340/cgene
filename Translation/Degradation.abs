module Degradation;
export Degradation, ProteinDegradation, MrnaDegradation;
import * from Cell;

/*
 * A crude degradation mechanism
 * based on a given rate and the quantity of the respective reactant
 */

interface Degradation {
    Unit start();
    Unit stop();
    Bool isOn();
    Rat getRate();
    Unit setRate(Rat r);
    Unit run();
}


[Far]
class ProteinDegradation ([Final] Cell cell, Rat rate) implements Degradation {
    Bool run = True;
    uses Run;
    uses Control;

    Int getQuantity() {
        return await cell!getSumProteinGtZero();
    }
    Unit degrade() {
        await cell!removeProtein();
    }
}

[Far]
class MrnaDegradation ([Final] Cell cell, String id, Rat rate) implements Degradation {
    Bool run = True;
    uses Run;
    uses Control;

    Int getQuantity() {
        return await cell!getQuantMrna(id);
    }
    Unit degrade() {
        await cell!removeMrna(id);
    }
}


trait Run = {
    Unit run() {
        assert rate > 0;
        while (True) {
            await this.run;
            Int quantity = this.getQuantity();
            assert quantity > 0;

            // try a constant duration...
            quantity = 1;
            Rat d = 1 / (rate * quantity);
            this.degrade();
            duration(d, d);
        }
    }
}

trait Control = {
    Unit start() { run = True; }
    Unit stop() { run = False; }
    Bool isOn() { return run; }
    Rat getRate() { return rate; }
    Unit setRate(Rat r) {
        if (r > 0)
            this.rate = r;
    }
}
