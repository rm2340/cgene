module Main;
import * from Runnable;
import * from Cell;
import * from Dna;
import * from Rna;
import * from Mrna;
import * from Protein;
import * from Ribosome;
import * from Transcription;
import * from Translation;
import * from Degradation;
import * from Logger;

interface Model {

    [HTTPCallable] Int getQMrna();
    [HTTPCallable] Int getQRibosome();
    [HTTPCallable] Int getQProtein();

    // TODO: get other items for plotting

    [HTTPCallable] Float startSim();
    [HTTPCallable] Float stopSimOnTimeout();
    [HTTPCallable] Float stopSim();

    [HTTPCallable] Map<String,Int> getConfig();
    [HTTPCallable] Unit setConfig(List<Int> cfg);
    [HTTPCallable] String vizMrna();
}

class Model([Near] Cell cell) implements Model {

    List<Runnable> procs = list[];
    Bool initialised = False;

    Map<String,Int> config = map[
        Pair("tStart", 240),
        Pair("tStop", 540),
        Pair("Translation", 1),
        Pair("Protein", 500),
        Pair("Ribosome", 500),
        Pair("mRNA", 10),
        Pair("nAptamer", 3),
        Pair("Ligand", 1),
        Pair("Growth", 1)
    ];

    Map<String,Int> getConfig() {
        return config;
    }

    /* Map as parameter not supported via the HTTP API currently
     */
    Unit setConfig(List<Int> cfg) {
        println("*** " + toString(cfg));
        config = put(config, "tStart", nth(cfg,0));
        config = put(config, "tStop", nth(cfg,1));
        config = put(config, "Translation", nth(cfg,2));
        config = put(config, "Protein", nth(cfg,3));
        config = put(config, "Ribosome", nth(cfg,4));
        config = put(config, "mRNA", nth(cfg,5));
        config = put(config, "nAptamer", nth(cfg,6));
        config = put(config, "Ligand", nth(cfg,7));
        config = put(config, "Growth", nth(cfg,8));
    }
    Int getQMrna() {
        return cell.getSumMrna();
    }
    Int getQProtein() {
        return cell.getSumProtein();
    }
    Int getQRibosome() {
        Translation tl = cell.getTranslation();
        return tl.getQRibosome();
    }


    /*
     * - Add initial amount of mRNAs to cell
     * - Let time elapse until requested starting time
     * - Add initial amount of proteins to cell
     */
    Unit initSim() {
        this.init();
        Int n = lookupUnsafe(config, "Protein");
        while (n > 0) {
            await cell!addProtein(Protein("Initial", list[]));
            n = n-1;
        }
        Int t = lookupUnsafe(config, "tStart");
        await duration(t/1, t/1);

    }

    /*
     * - Start processes: translation, growth, loggers
     */
    Float startSim() {
        if (! initialised) {
            initialised = True;
            this.initSim();
        }

        cell.setLigand(lookupUnsafe(config, "Ligand") == 1);

        // start processes
        if (lookupUnsafe(config, "Translation") == 1) {
            Translation tl = new local Translation(cell, lookupUnsafe(config, "Ribosome"));
            procs = appendright(procs, tl);
        }
        if (lookupUnsafe(config, "Growth") == 1) {
            Degradation gr = new CellGrowthDegradation(cell);
            procs = appendright(procs, gr);
        }
        [HTTPName: "Logger"] Logger l1 = new ProteinLogger(cell, 1);
        procs = appendright(procs, l1);
        Runnable l2 = new ProteinLoggerStdout(cell, 60);
        procs = appendright(procs, l2);
        return float(timeValue(now()));
    }

    /*
     * Auto-terminate the simulation processes after time limit
     */
    Float stopSimOnTimeout() {
        await timeValue(now()) >= lookupUnsafe(config, "tStop");
        Float t = this.stopSim();
        return t;
    }

    /*
     * - Stop processes (note that they currently cannot be restarted; FIXME?)
     */
    Float stopSim() {
        println("***Stopping simulation...");
        while(! isEmpty(procs)) {
            Runnable r = head(procs);
            Fut<Unit> f = r!stop();
            procs = tail(procs);
        }
        return float(timeValue(now()));
    }

    String vizMrna() {
        Mrna rna = cell.getMrna();
        String s = await rna!toDotBracket();
        println("***vizMrna " + s);
        return s;
    }


    Unit init() {
        /* URA3 is a gene on chromosome V in Saccharomyces cerevisiae (yeast)
           http://www.yeastgenome.org/locus/S000000747/overview
           Chr 5 from 116121 to 117051
         */
        Gene ura3 = Gene("URA3", list[
                A,A,C,C,C,A,A,C,U,G,C,A,C,A,G,A,A,C,A,A,A,A,A,C,C,U,G,C,A,G,G,A,A,A,C,G,A,A,G,A,U,A,A,A,U,C,A,U,G,U,C,G,A,A,A,G,C,U,A,C,
                A,U,A,U,A,A,G,G,A,A,C,G,U,G,C,U,G,C,U,A,C,U,C,A,U,C,C,U,A,G,U,C,C,U,G,U,U,G,C,U,G,C,C,A,A,G,C,U,A,U,U,U,A,A,U,A,U,C,A,U,
                G,C,A,C,G,A,A,A,A,G,C,A,A,A,C,A,A,A,C,U,U,G,U,G,U,G,C,U,U,C,A,U,U,G,G,A,U,G,U,U,C,G,U,A,C,C,A,C,C,A,A,G,G,A,A,U,U,A,C,U,
                G,G,A,G,U,U,A,G,U,U,G,A,A,G,C,A,U,U,A,G,G,U,C,C,C,A,A,A,A,U,U,U,G,U,U,U,A,C,U,A,A,A,A,A,C,A,C,A,U,G,U,G,G,A,U,A,U,C,U,U,
                G,A,C,U,G,A,U,U,U,U,U,C,C,A,U,G,G,A,G,G,G,C,A,C,A,G,U,U,A,A,G,C,C,G,C,U,A,A,A,G,G,C,A,U,U,A,U,C,C,G,C,C,A,A,G,U,A,C,A,A,
                U,U,U,U,U,U,A,C,U,C,U,U,C,G,A,A,G,A,C,A,G,A,A,A,A,U,U,U,G,C,U,G,A,C,A,U,U,G,G,U,A,A,U,A,C,A,G,U,C,A,A,A,U,U,G,C,A,G,U,A,
                C,U,C,U,G,C,G,G,G,U,G,U,A,U,A,C,A,G,A,A,U,A,G,C,A,G,A,A,U,G,G,G,C,A,G,A,C,A,U,U,A,C,G,A,A,U,G,C,A,C,A,C,G,G,U,G,U,G,G,U,
                G,G,G,C,C,C,A,G,G,U,A,U,U,G,U,U,A,G,C,G,G,U,U,U,G,A,A,G,C,A,G,G,C,G,G,C,G,G,A,A,G,A,A,G,U,A,A,C,A,A,A,G,G,A,A,C,C,U,A,G,
                A,G,G,C,C,U,U,U,U,G,A,U,G,U,U,A,G,C,A,G,A,A,U,U,G,U,C,A,U,G,C,A,A,G,G,G,C,U,C,C,C,U,A,G,C,U,A,C,U,G,G,A,G,A,A,U,A,U,A,C,
                U,A,A,G,G,G,U,A,C,U,G,U,U,G,A,C,A,U,U,G,C,G,A,A,G,A,G,C,G,A,C,A,A,A,G,A,U,U,U,U,G,U,U,A,U,C,G,G,C,U,U,U,A,U,U,G,C,U,C,A,
                A,A,G,A,G,A,C,A,U,G,G,G,U,G,G,A,A,G,A,G,A,U,G,A,A,G,G,U,U,A,C,G,A,U,U,G,G,U,U,G,A,U,U,A,U,G,A,C,A,C,C,C,G,G,U,G,U,G,G,G,
                U,U,U,A,G,A,U,G,A,C,A,A,G,G,G,A,G,A,C,G,C,A,U,U,G,G,G,U,C,A,A,C,A,G,U,A,U,A,G,A,A,C,C,G,U,G,G,A,U,G,A,U,G,U,G,G,U,C,U,C,
                U,A,C,A,G,G,A,U,C,U,G,A,C,A,U,U,A,U,U,A,U,U,G,U,U,G,G,A,A,G,A,G,G,A,C,U,A,U,U,U,G,C,A,A,A,G,G,G,A,A,G,G,G,A,U,G,C,U,A,A,
                G,G,U,A,G,A,G,G,G,U,G,A,A,C,G,U,U,A,C,A,G,A,A,A,A,G,C,A,G,G,C,U,G,G,G,A,A,G,C,A,U,A,U,U,U,G,A,G,A,A,G,A,U,G,C,G,G,C,C,A,
                G,C,A,A,A,A,C,U,A,A,A,A,A,A,C,U,G,U,A,U,U,A,U,A,A,G,U,A,A,A,U,G,C,A,U,G,U,A,U,A,C,U,A,A,A,C,U,C,A,C,A,A,A,U,U,A,G,A,G,C,
                U,U,C,A,A,U,U,U,A,A,U,U,A,U,A,U,C,A,G,U,U,A,U,U,A,C,C,C,G,G,G]);

        // Aptamer and its folding (secondary structure)
        // Tetracycline-binding aptamer 32sh
        Gene apt = Gene("32SH", list[
                G,G,C,C,U,A,A,A,A,C,A,U,A,C,C,A,G,A,U,C,G,C,C,A,C,C,C,G,C,G,C,U,U,U,A,A,U,C,U,G,G,A,G,A,G,G,U,G,A,A,G,
                A,A,U,A,C,G,A,C,C,A,C,C,U,A,G,G,C,C]);

        Folding folding = Folding(map[
                Pair(0,68), Pair(1,67), Pair(2,66), Pair(3,65), Pair(4,64),
                Pair(13,40), Pair(14,39), Pair(15,38), Pair(16,37), Pair(17,36), Pair(18,35),
                Pair(19,29), Pair(20,28), Pair(21,27),
                Pair(43,63), Pair(44,62), Pair(45,61), Pair(46,60), Pair(47,59)
        ]);
        Rna aptRna = new local Rna(apt);
        aptRna.fold(folding);

        /**************************************************************************
         * Configure the cell
         **************************************************************************/

        // Populate cell with mRNAs
        // For yeast under medium to fast growth rates, the number of mRNA was reported to be in the range of 10,000-60,000 per cell
        Int i = lookupUnsafe(config, "mRNA");
        //println("Creating " + toString(i) + " " + id(ura3) + " mRNAs " + toString(length(code(ura3))+length(code(apt))));
        while(i > 0) {
            Mrna mrna = new Mrna(ura3);
            Int j = lookupUnsafe(config, "nAptamer");
            while(j > 0) {
                await mrna!insert(aptRna, 46); // insert aptamer just before start codon
                j = j-1;
            }
            cell.addMrna(id(ura3), mrna);
            i = i-1;
        }
    }
}


{
        /**************************************************************************
         * The Cell
         **************************************************************************/
        [HTTPName: "Cell"] Cell cell = new local Cell();

        /**************************************************************************
         * The Model (with HTTP Interface)
         **************************************************************************/
        [HTTPName: "Model"] Model model = new local Model(cell);

}

