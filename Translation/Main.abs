module Main;
import * from Runnable;
import * from Cell;
import * from Dna;
import * from Rna;
import * from Mrna;
import * from Protein;
import * from Ribosome;
import * from Transcription;
import * from Translation;
import * from Degradation;
import * from Logger;

/* All configuration aspects of the model are kept in one place,
 * so we can do it via a single method call via HTTP
 */
data ModelConfig = ModelConfig(
    Rat  cfg_t_start,
    Rat  cfg_t_stop,
    Bool cfg_translation,
    Int  cfg_n_protein,
    Int  cfg_n_ribosome,
    Rat  cfg_t_riboSearch,
    Rat  cfg_t_riboAttach,
    Rat  cfg_t_riboDecodeCodon,
    Int  cfg_n_mrna,
    Bool cfg_ligand,
    Int  cfg_n_aptamer,
    Int  cfg_n_inhib,
    Bool cfg_growth,
    Rat  cfg_t_readProtein
);

interface Model {

    [HTTPCallable] Int getQMrna();
    [HTTPCallable] Int getQRibosome();
    [HTTPCallable] Int getQProtein();
    [HTTPCallable] Float getCurrentTime();

    // TODO: get other items for plotting

    [HTTPCallable] Float startSim();
    [HTTPCallable] Float stopSimOnTimeout();
    [HTTPCallable] Float stopSim();

    [HTTPCallable] ModelConfig getConfig();
    [HTTPCallable] Unit setConfigB(List<Bool> cfg);
    [HTTPCallable] Unit setConfigI(List<Int> cfg);
    [HTTPCallable] Unit setConfigF(List<Float> cfg);

    [HTTPCallable] String vizMrna();
}

class Model([Near] Cell cell) implements Model {

    List<Runnable> procs = list[];
    Bool initialised = False;

    /*
     * Default configuration
     */
    ModelConfig config = ModelConfig(
        240/1,      // t_start
        540/1,      // t_stop
        True,       // translation
        500,        // n_protein
        500,        // n_ribosome
        70/1,       // t_riboSearch
        10/1,       // t_riboAttach
        1/10,       // t_riboDecodeCodon
        10,         // n_mrna
        True,       // ligand
        1,          // n_aptamer
        4,          // n_inhib
        False,      // growth
        1/1         // t_readProtein
    );

    ModelConfig getConfig() {
        println("***cfg " + toString(config));
        return config;
    }

    /* TODO
       Ideally we would have a single setConfig method with a
       ModelConfig parameter that can be called via HTTP.
       Until that is implemented, we need this mad workaround...
     */
    Unit setConfigB(List<Bool> cfg) {
        println("***cfg set Bool " + toString(cfg));
        config = ModelConfig(
            cfg_t_start(config),
            cfg_t_stop(config),
            nth(cfg, 0),
            cfg_n_protein(config),
            cfg_n_ribosome(config),
            cfg_t_riboSearch(config),
            cfg_t_riboAttach(config),
            cfg_t_riboDecodeCodon(config),
            cfg_n_mrna(config),
            nth(cfg, 1),
            cfg_n_aptamer(config),
            cfg_n_inhib(config),
            nth(cfg, 2),
            cfg_t_readProtein(config)
        );
    }
    Unit setConfigI(List<Int> cfg) {
        println("***cfg set Int " + toString(cfg));
        config = ModelConfig(
            cfg_t_start(config),
            cfg_t_stop(config),
            cfg_translation(config),
            nth(cfg, 0), //cfg_n_protein(config)
            nth(cfg, 1), //cfg_n_ribosome(config)
            cfg_t_riboSearch(config),
            cfg_t_riboAttach(config),
            cfg_t_riboDecodeCodon(config),
            nth(cfg, 2), //cfg_n_mRNA(config)
            cfg_ligand(config),
            nth(cfg, 3), //cfg_n_aptamer(config)
            nth(cfg, 4), //cfg_n_inhib(config)
            cfg_growth(config),
            cfg_t_readProtein(config)
        );
    }
    Unit setConfigF(List<Float> cfg) {
        println("***cfg set Float " + toString(cfg));
        config = ModelConfig(
            rat(nth(cfg, 0)), //cfg_t_start(config)
            rat(nth(cfg, 1)), //cfg_t_stop(config)
            cfg_translation(config),
            cfg_n_protein(config),
            cfg_n_ribosome(config),
            rat(nth(cfg, 2)), //cfg_t_riboSearch(config),
            rat(nth(cfg, 3)), //cfg_t_riboAttach(config),
            rat(nth(cfg, 4)), //cfg_t_riboDecodeCodon(config),
            cfg_n_mrna(config),
            cfg_ligand(config),
            cfg_n_aptamer(config),
            cfg_n_inhib(config),
            cfg_growth(config),
            rat(nth(cfg, 5)) //cfg_t_readProtein(config)
        );
    }

    Int getQMrna() {
        return cell.getSumMrna();
    }
    Int getQProtein() {
        return cell.getSumProtein();
    }
    Int getQRibosome() {
        Translation tl = cell.getTranslation();
        return tl.getQRibosome();
    }


    /*
     * - Add initial amount of mRNAs to cell
     * - Let time elapse until requested starting time
     * - Add initial amount of proteins to cell
     */
    Unit initSim() {
        this.init();
        Int n = cfg_n_protein(config);
        while (n > 0) {
            await cell!addProtein(Protein("Initial", list[]));
            n = n-1;
        }
        Rat t = 60 * cfg_t_start(config);
        await duration(t, t);

    }

    /*
     * - Start processes: translation, growth, loggers
     */
    Float startSim() {
        if (! initialised) {
            initialised = True;
            this.initSim();
        }

        cell.setLigand(cfg_ligand(config));

        // start processes
        if (cfg_translation(config)) {
            Translation tl = new local Translation(
                cell,
                cfg_n_ribosome(config),
                cfg_t_riboSearch(config),
                cfg_t_riboAttach(config),
                cfg_t_riboDecodeCodon(config));
            procs = appendright(procs, tl);
        }
        if (cfg_growth(config)) {
            Degradation gr = new CellGrowthDegradation(cell);
            procs = appendright(procs, gr);
        }
        [HTTPName: "Logger"] Logger l1 = new ProteinLogger(cell, 60 * cfg_t_readProtein(config));
        procs = appendright(procs, l1);
        Runnable l2 = new ProteinLoggerStdout(cell, 60 * 30);
        procs = appendright(procs, l2);
        return float(timeValue(now()));
    }

    /*
     * Auto-terminate the simulation processes after time limit
     */
    Float stopSimOnTimeout() {
        await timeValue(now()) >= 60 * cfg_t_stop(config);
        //Float t = this.stopSim();
        return float(timeValue(now()));
    }

    /*
     * Stop processes (note that they currently cannot be restarted; FIXME?)
     * We don't call this anymore - instead we let the web app terminate the model (/quit)
     */
    Float stopSim() {
        println("***Stopping simulation...");
        while(! isEmpty(procs)) {
            Runnable r = head(procs);
            println("***Stopping " + toString(r));
            Fut<Unit> f = r!stop();
            procs = tail(procs);
        }
        return float(timeValue(now()));
    }

    Float getCurrentTime() {
        return float(timeValue(now()));
    }


    String vizMrna() {
        Mrna rna = cell.getMrna();
        String s = await rna!toDotBracket();
        println("***vizMrna " + s);
        return s;
    }


    Unit init() {
        /* URA3 is a gene on chromosome V in Saccharomyces cerevisiae (yeast)
           http://www.yeastgenome.org/locus/S000000747/overview
           Chr 5 from 116121 to 117051
         */
        Gene ura3 = Gene("URA3", list[
                A,A,C,C,C,A,A,C,U,G,C,A,C,A,G,A,A,C,A,A,A,A,A,C,C,U,G,C,A,G,G,A,A,A,C,G,A,A,G,A,U,A,A,A,U,C,A,U,G,U,C,G,A,A,A,G,C,U,A,C,
                A,U,A,U,A,A,G,G,A,A,C,G,U,G,C,U,G,C,U,A,C,U,C,A,U,C,C,U,A,G,U,C,C,U,G,U,U,G,C,U,G,C,C,A,A,G,C,U,A,U,U,U,A,A,U,A,U,C,A,U,
                G,C,A,C,G,A,A,A,A,G,C,A,A,A,C,A,A,A,C,U,U,G,U,G,U,G,C,U,U,C,A,U,U,G,G,A,U,G,U,U,C,G,U,A,C,C,A,C,C,A,A,G,G,A,A,U,U,A,C,U,
                G,G,A,G,U,U,A,G,U,U,G,A,A,G,C,A,U,U,A,G,G,U,C,C,C,A,A,A,A,U,U,U,G,U,U,U,A,C,U,A,A,A,A,A,C,A,C,A,U,G,U,G,G,A,U,A,U,C,U,U,
                G,A,C,U,G,A,U,U,U,U,U,C,C,A,U,G,G,A,G,G,G,C,A,C,A,G,U,U,A,A,G,C,C,G,C,U,A,A,A,G,G,C,A,U,U,A,U,C,C,G,C,C,A,A,G,U,A,C,A,A,
                U,U,U,U,U,U,A,C,U,C,U,U,C,G,A,A,G,A,C,A,G,A,A,A,A,U,U,U,G,C,U,G,A,C,A,U,U,G,G,U,A,A,U,A,C,A,G,U,C,A,A,A,U,U,G,C,A,G,U,A,
                C,U,C,U,G,C,G,G,G,U,G,U,A,U,A,C,A,G,A,A,U,A,G,C,A,G,A,A,U,G,G,G,C,A,G,A,C,A,U,U,A,C,G,A,A,U,G,C,A,C,A,C,G,G,U,G,U,G,G,U,
                G,G,G,C,C,C,A,G,G,U,A,U,U,G,U,U,A,G,C,G,G,U,U,U,G,A,A,G,C,A,G,G,C,G,G,C,G,G,A,A,G,A,A,G,U,A,A,C,A,A,A,G,G,A,A,C,C,U,A,G,
                A,G,G,C,C,U,U,U,U,G,A,U,G,U,U,A,G,C,A,G,A,A,U,U,G,U,C,A,U,G,C,A,A,G,G,G,C,U,C,C,C,U,A,G,C,U,A,C,U,G,G,A,G,A,A,U,A,U,A,C,
                U,A,A,G,G,G,U,A,C,U,G,U,U,G,A,C,A,U,U,G,C,G,A,A,G,A,G,C,G,A,C,A,A,A,G,A,U,U,U,U,G,U,U,A,U,C,G,G,C,U,U,U,A,U,U,G,C,U,C,A,
                A,A,G,A,G,A,C,A,U,G,G,G,U,G,G,A,A,G,A,G,A,U,G,A,A,G,G,U,U,A,C,G,A,U,U,G,G,U,U,G,A,U,U,A,U,G,A,C,A,C,C,C,G,G,U,G,U,G,G,G,
                U,U,U,A,G,A,U,G,A,C,A,A,G,G,G,A,G,A,C,G,C,A,U,U,G,G,G,U,C,A,A,C,A,G,U,A,U,A,G,A,A,C,C,G,U,G,G,A,U,G,A,U,G,U,G,G,U,C,U,C,
                U,A,C,A,G,G,A,U,C,U,G,A,C,A,U,U,A,U,U,A,U,U,G,U,U,G,G,A,A,G,A,G,G,A,C,U,A,U,U,U,G,C,A,A,A,G,G,G,A,A,G,G,G,A,U,G,C,U,A,A,
                G,G,U,A,G,A,G,G,G,U,G,A,A,C,G,U,U,A,C,A,G,A,A,A,A,G,C,A,G,G,C,U,G,G,G,A,A,G,C,A,U,A,U,U,U,G,A,G,A,A,G,A,U,G,C,G,G,C,C,A,
                G,C,A,A,A,A,C,U,A,A,A,A,A,A,C,U,G,U,A,U,U,A,U,A,A,G,U,A,A,A,U,G,C,A,U,G,U,A,U,A,C,U,A,A,A,C,U,C,A,C,A,A,A,U,U,A,G,A,G,C,
                U,U,C,A,A,U,U,U,A,A,U,U,A,U,A,U,C,A,G,U,U,A,U,U,A,C,C,C,G,G,G]);

        // Aptamer and its folding (secondary structure)
        // Tetracycline-binding aptamer 32sh
        Gene apt = Gene("32SH", list[
                G,G,C,C,U,A,A,A,A,C,A,U,A,C,C,A,G,A,U,C,G,C,C,A,C,C,C,G,C,G,C,U,U,U,A,A,U,C,U,G,G,A,G,A,G,G,U,G,A,A,G,
                A,A,U,A,C,G,A,C,C,A,C,C,U,A,G,G,C,C]);

        Folding folding = Folding(map[
                Pair(0,68), Pair(1,67), Pair(2,66), Pair(3,65), Pair(4,64),
                Pair(13,40), Pair(14,39), Pair(15,38), Pair(16,37), Pair(17,36), Pair(18,35),
                Pair(19,29), Pair(20,28), Pair(21,27),
                Pair(43,63), Pair(44,62), Pair(45,61), Pair(46,60), Pair(47,59)
        ]);
        Rna aptRna = new local Rna(apt);
        aptRna.fold(folding);

        /**************************************************************************
         * Configure the cell
         **************************************************************************/

        // Populate cell with mRNAs
        // For yeast under medium to fast growth rates, the number of mRNA was reported to be in the range of 10,000-60,000 per cell
        Int i = cfg_n_mrna(config);
        //println("Creating " + toString(i) + " " + id(ura3) + " mRNAs " + toString(length(code(ura3))+length(code(apt))));
        while(i > 0) {
            Mrna mrna = new Mrna(ura3);
            await mrna!setInhibitionFactor(cfg_n_inhib(config));
            Int j = cfg_n_aptamer(config);
            while(j > 0) {
                await mrna!insert(aptRna, 46); // insert aptamer just before start codon
                j = j-1;
            }
            cell.addMrna(id(ura3), mrna);
            i = i-1;
        }
    }
}


{
        /**************************************************************************
         * The Cell
         **************************************************************************/
        [HTTPName: "Cell"] Cell cell = new local Cell();

        /**************************************************************************
         * The Model (with HTTP Interface)
         **************************************************************************/
        [HTTPName: "Model"] Model model = new local Model(cell);

}

